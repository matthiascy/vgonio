struct Uniforms {
    proj_view: mat4x4<f32>,
    resolution: vec4<f32>, // used for screen space calculations
}

@group(0) @binding(0)
var<uniform> uniforms: Uniforms;

@vertex
fn vs_depth_pass(@location(0) position: vec3<f32>) -> @builtin(position) vec4<f32> {
    return uniforms.proj_view * vec4<f32>(position, 1.0);
}

struct VertexOutput {
    @builtin(position) position: vec4<f32>,
    @location(0) ndc: vec4<f32>,
    @location(1) uv: vec2<f32>,
}

// WGPU's NDC coordinates are y-up, x-right but the texture is y-down,
// x-right so we need to flip the y coordinate if we want to sample
// correctly the texture generated by the depth pass.
let tex_coord_flip: vec2<f32> = vec2<f32>(0.5, -0.5);

@vertex
fn vs_render_pass(@location(0) position: vec3<f32>) -> VertexOutput {
    var output: VertexOutput;
    let clip_pos = uniforms.proj_view * vec4<f32>(position, 1.0);
    output.position = clip_pos;
    output.ndc = clip_pos / clip_pos.w;
    output.uv = output.ndc.xy * tex_coord_flip + vec2<f32>(0.5, 0.5);
    return output;
}

@group(0) @binding(1)
var depth_texture : texture_depth_2d;
@group(0) @binding(2)
var depth_sampler : sampler_comparison;

@fragment
fn fs_render_pass(vert: VertexOutput) -> @location(0) vec4<f32> {
    // Screen-space texture coordinates calculation: y-down, x-right
    // let uv = (vert.position.xy / uniforms.resolution.xy);

    // Texture coordinates calculated in vertex shader.
    let uv = vert.uv;

    // Texture coordinates calculated in fragment shader, using
    // ndc coordinates, y-up, x-right.
    // let uv = vert.ndc.xy * tex_coord_flip + vec2<f32>(0.5, 0.5);

    let depth = textureSampleCompare(depth_texture, depth_sampler, vert.uv, vert.ndc.z);

    //return vec4<f32>(uv.x, uv.y, 0.0, 1.0);
    if (depth == 0.0) {
        return vec4<f32>(1.0, 0.0, 0.0, 1.0);
    } else if (depth == 1.0) {
        return vec4<f32>(0.0, 1.0, 0.0, 1.0);
    } else {
        return vec4<f32>(depth, depth, depth, 1.0);
    }

}
